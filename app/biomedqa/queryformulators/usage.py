!pip install scispacy
!pip install https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/releases/v0.5.0/en_core_sci_lg-0.5.0.tar.gz
!pip install contractions


# Get the class
from biomedqa.queryformulators.queryformulator import QueryFormulator

# Get the modules needed to make the class work
import spacy
import regex as re
import contractions
from scispacy.abbreviation import AbbreviationDetector
from difflib import SequenceMatcher





if __name__ == "__main__":
   
    customStop = {"'d",
              "'ll",
              "'m",
              "'re",            
              "'ve",
              'a',
              'about',
              'across',
              'against',
              'along',
              'also',
              'although',
              'always',
              'am',
              'among',
              'amongst',
              'an',
              'and',
              'another',
              'anyhow',
              'anyone',
              'anyway',
              'anywhere',
              'are',
              'as',
              'at',
              'be',
              'because',
              'been',
              'beforehand',
              'being',
              'beside',
              'besides',
              'beyond',
              'but',
              'by',
              'ca',
              'call',
              'can',
              'could',
              'did',
              'do',
              'does',
              'doing',
              'done',
              'down',
              'due', 
              'each',
              'either',
              'eleven',
              'elsewhere',
              'empty',
              'even',
              'ever',
              'everyone',
              'everything',
              'everywhere',
              'for',
              'former',
              'formerly',
              'from',
              'further',
              'get',
              'give',
              'go',
              'had',
              'has',
              'have',
              'he',
              'hence',
              'her',
              'here',
              'hereafter',
              'hers',
              'herself',
              'him',
              'himself',
              'his',
              'how',
              'however',
              'i',
              'if',
              'in',
              'indeed',
              'into',
              'is',
              'it',
              'its',
              'itself',
              'just',
              'latter',
              'latterly',
              'made',
              'make',
              'many',
              'may',
              'me',
              'meanwhile',
              'mine',
              'moreover',
              'must',
              'my',
              'myself',
              "n't",
              'namely',
              'nevertheless',
              'nobody',
              'none',
              'noone',
              'nowhere',
              'n‘t',
              'n’t',
              'of',
              'off',
              'often',
              'onto',
              'otherwise',
              'our',
              'ours',
              'ourselves',
              'per',
              'perhaps',
              'please',
              'quite',
              'rather',
              're',
              'really',
              'regarding',
              'same',
              'say',
              'seem',
              'seemed',
              'seeming',
              'seems',
              'serious',
              'she',
              'should',
              'show',
              'since',
              'so',
              'somehow',
              'someone',
              'something',
              'sometime',
              'sometimes',
              'somewhere',
              'still',
              'such',
              'take',            
              'than',
              'that',
              'the',
              'their',
              'them',
              'themselves',
              'then',
              'thence',
              'there',
              'thereafter',
              'thereby',
              'therefore',
              'therein',
              'thereupon',
              'these',
              'they',
              'this',
              'those',
              'though',
              'through',
              'throughout',
              'thru',
              'thus',
              'to',
              'together',
              'too',
              'toward',
              'towards',
              'unless',
              'until',
              'up',
              'upon',
              'us',
              'used',
              'using',
              'various',
              'very',
              'via',
              'was',
              'we',
              'well',
              'were',
              'what',
              'whatever',
              'when',
              'whence',
              'whenever',
              'where',
              'whereafter',
              'whereas',
              'whereby',
              'wherein',
              'whereupon',
              'wherever',
              'whether',
              'which',
              'while',
              'whither',
              'who',
              'whoever',
              'whole',
              'whom',
              'whose',
              'why',
              'will',
              'with',
              'within',
              'without',
              'would',
              'yet',
              'you',
              'your',
              'yours',
              'yourself',
              'yourselves',
              '‘d',
              '‘ll',
              '‘m',
              '‘re',
              '‘s',
              '‘ve',
              '’d',
              '’ll',
              '’m',
              '’re',
              '’s',
              '’ve'}
    
    # Usage

    # 1) Call the spacy nlp pipelines:
    nlp_medical = spacy.load("en_core_sci_lg") #spacy.load("en_core_sci_scibert")
    nlp_medical.add_pipe("abbreviation_detector")

    spacy.cli.download("en_core_web_sm")
    nlp = spacy.load("en_core_web_sm")  
    
    # 2) Initialize the class:
    queryFormulator_ = QueryFormulator(nlp_medical, nlp, customStop)
    
    
    # 3) Some examples:
    exampleSents = ['How many years can a person with cancer live?', 
                'What are the main symptoms of coronavirus when you already have a sore throat?',
                'What are the main symptoms of coronavirus?',
                'What ARE the main sympotoms of a breast and colon cancer?',
                'Why does my muscle hurt after exercising?',
                'Name synonym of Acrokeratosis paraneoplastica',
                'Name a synonym of Acrokeratosis paraneoplastica',
                "What is the mode of inheritance of Wilson's disease?",
                "My stomach hurts, I don't know if I have cancer",
                "I don't feel my hands, what can it be?"]



    for sent in exampleSents:

      print('-------------')
      print('Query:')
      print(sent)
      print()
      print('Query formulation')
      print(queryFormulator_.buildQuery(sent)) # buildQuery --> function of the class which builds and returns the final sentence

      print('\n')
